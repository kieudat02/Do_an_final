const { GoogleGenerativeAI } = require('@google/generative-ai');
const TourDataService = require('./tourDataService');
const dotenv = require('dotenv');
dotenv.config();

// Kh·ªüi t·∫°o Gemini AI v·ªõi API key
const genAI = new GoogleGenerativeAI(process.env.GEMINI_API_KEY);

// L∆∞u tr·ªØ l·ªãch s·ª≠ h·ªôi tho·∫°i trong memory (cho ·ª©ng d·ª•ng c√¥ng khai)
const conversationHistory = new Map();

// Cache cho d·ªØ li·ªáu tour v·ªõi caching strategy linh ho·∫°t
let tourDataCache = null;
let lastCacheUpdate = null;
const CACHE_DURATION = 10 * 60 * 1000; // Gi·∫£m xu·ªëng 10 ph√∫t ƒë·ªÉ data realtime h∆°n

// C·∫•u h√¨nh m·∫∑c ƒë·ªãnh cho model
const MODEL_CONFIG = {
    model: "gemini-1.5-flash",
    generationConfig: {
        temperature: 0.7,
        topK: 40,
        topP: 0.95,
        maxOutputTokens: 1024,
    },
    safetySettings: [
        {
            category: "HARM_CATEGORY_HARASSMENT",
            threshold: "BLOCK_MEDIUM_AND_ABOVE",
        },
        {
            category: "HARM_CATEGORY_HATE_SPEECH",
            threshold: "BLOCK_MEDIUM_AND_ABOVE",
        },
        {
            category: "HARM_CATEGORY_SEXUALLY_EXPLICIT",
            threshold: "BLOCK_MEDIUM_AND_ABOVE",
        },
        {
            category: "HARM_CATEGORY_DANGEROUS_CONTENT",
            threshold: "BLOCK_MEDIUM_AND_ABOVE",
        },
    ],
};

// Context h·ªá th·ªëng cho chatbot du l·ªãch v·ªõi d·ªØ li·ªáu th·ª±c
const getSystemContext = async (forceRefresh = false) => {
    const now = Date.now();

    // Ki·ªÉm tra cache - s·ª≠ d·ª•ng cache n·∫øu c√≤n hi·ªáu l·ª±c v√† kh√¥ng force refresh
    if (!forceRefresh && tourDataCache && lastCacheUpdate && (now - lastCacheUpdate) < CACHE_DURATION) {
        return buildSystemPrompt(tourDataCache);
    }

    // L·∫•y d·ªØ li·ªáu m·ªõi t·ª´ database
    try {
        console.log(`[Cache] ${forceRefresh ? 'Force refreshing' : 'Refreshing'} tour data cache...`);
        tourDataCache = await TourDataService.getChatbotContext();
        lastCacheUpdate = now;
        console.log(`[Cache] Tour data cache updated successfully. Total tours: ${tourDataCache.statistics.totalTours}`);
        return buildSystemPrompt(tourDataCache);
    } catch (error) {
        console.error('Error getting tour data for chatbot:', error);
        // N·∫øu c√≥ cache c≈©, s·ª≠ d·ª•ng cache c≈© thay v√¨ fallback
        if (tourDataCache) {
            console.warn('[Cache] Using stale cache data due to database error');
            return buildSystemPrompt(tourDataCache);
        }
        return getBasicSystemContext();
    }
};

/**
 * Invalidate cache - s·ª≠ d·ª•ng khi c·∫ßn force refresh data
 */
const invalidateCache = () => {
    tourDataCache = null;
    lastCacheUpdate = null;
    console.log('[Cache] Tour data cache invalidated');
};

/**
 * Get cache status
 */
const getCacheStatus = () => {
    const now = Date.now();
    return {
        hasCache: !!tourDataCache,
        lastUpdate: lastCacheUpdate ? new Date(lastCacheUpdate).toISOString() : null,
        isExpired: lastCacheUpdate ? (now - lastCacheUpdate) > CACHE_DURATION : true,
        ageInMinutes: lastCacheUpdate ? Math.floor((now - lastCacheUpdate) / (60 * 1000)) : null
    };
};

// X√¢y d·ª±ng system prompt v·ªõi d·ªØ li·ªáu th·ª±c - t·ªëi ∆∞u ƒë·ªÉ tr√°nh token limit
const buildSystemPrompt = (tourData) => {
    let prompt = `B·∫°n l√† NDTravel Assistant - tr·ª£ l√Ω AI chuy√™n t∆∞ v·∫•n tour du l·ªãch.

üéØ TH√îNG TIN C√îNG TY:
NDTravel - T·ªï ch·ª©c tour du l·ªãch trong n∆∞·ªõc v√† qu·ªëc t·∫ø
Slogan: "Kh√°m ph√° th·∫ø gi·ªõi c√πng NDTravel"

üìû TH√îNG TIN LI√äN H·ªÜ:
- Hotline: 0972 122 555
- Website: http://localhost:5173
- H·ªó tr·ª£ 24/7 cho kh√°ch h√†ng

üìä TH·ªêNG K√ä:
- ${tourData.statistics.totalTours} tour, ${tourData.statistics.totalCategories} danh m·ª•c, ${tourData.statistics.totalDestinations} ƒëi·ªÉm ƒë·∫øn
- ƒê√°nh gi√° TB: ${tourData.statistics.averageRating.toFixed(1)}/5‚≠ê
- Gi√°: ${formatPrice(tourData.statistics.priceRange.minPrice)} - ${formatPrice(tourData.statistics.priceRange.maxPrice)}

üó∫Ô∏è DANH M·ª§C TOUR:\n`;

    // T·ªëi ∆∞u: ch·ªâ hi·ªÉn th·ªã top categories v√† tours n·ªïi b·∫≠t
    const topCategories = Object.entries(tourData.toursByCategory).slice(0, 5);
    topCategories.forEach(([categoryName, categoryData]) => {
        prompt += `üìç ${categoryName}: `;
        if (categoryData.tours && categoryData.tours.length > 0) {
            const topTours = categoryData.tours.slice(0, 2); // Ch·ªâ l·∫•y 2 tour top
            const tourNames = topTours.map(tour =>
                `${tour.title} (ID: ${tour._id}, ${formatPrice(tour.price)}${tour.rating > 0 ? `, ${tour.rating}‚≠ê` : ''})`
            );
            prompt += tourNames.join(', ') + '\n';
        } else {
            prompt += 'ƒêang c·∫≠p nh·∫≠t\n';
        }
    });

    prompt += `\nüåü ƒêI·ªÇM ƒê·∫æN PH·ªî BI·∫æN: `;
    const topDestinations = tourData.popularDestinations.slice(0, 8);
    prompt += topDestinations.map(dest => `${dest.name} (${dest.tourCount})`).join(', ');

    prompt += `\n\nüíº NHI·ªÜM V·ª§:
- T∆∞ v·∫•n tour ph√π h·ª£p ng√¢n s√°ch & s·ªü th√≠ch
- Cung c·∫•p th√¥ng tin ch√≠nh x√°c v·ªÅ gi√°, l·ªãch tr√¨nh
- H·ªó tr·ª£ so s√°nh tours
- H∆∞·ªõng d·∫´n ƒë·∫∑t tour tr√™n website
- Cung c·∫•p th√¥ng tin li√™n h·ªá khi kh√°ch h√†ng c·∫ßn h·ªó tr·ª£

üéØ NGUY√äN T·∫ÆC:
1. ∆Øu ti√™n tours c√≥ s·∫µn trong h·ªá th·ªëng
2. Th√¥ng tin gi√° ch√≠nh x√°c t·ª´ d·ªØ li·ªáu th·ª±c
3. Ph√π h·ª£p ng√¢n s√°ch kh√°ch h√†ng
4. Tr·∫£ l·ªùi ng·∫Øn g·ªçn, th√¢n thi·ªán b·∫±ng ti·∫øng Vi·ªát
5. Khuy·∫øn kh√≠ch ƒë·∫∑t tour tr√™n website
6. Khi kh√°ch h√†ng h·ªèi v·ªÅ li√™n h·ªá, LU√îN tr·∫£ l·ªùi: "B·∫°n c√≥ th·ªÉ li√™n h·ªá v·ªõi ch√∫ng t√¥i qua website http://localhost:5173 ho·∫∑c g·ªçi ƒëi·ªán ƒë·∫øn s·ªë hotline 0972 122 555. Ch√∫ng t√¥i h·ªó tr·ª£ 24/7!"
7. Khi gi·ªõi thi·ªáu tour c·ª• th·ªÉ, LU√îN cung c·∫•p link chi ti·∫øt v·ªõi ID th·ª±c: "Xem chi ti·∫øt v√† ƒë·∫∑t tour t·∫°i: http://localhost:5173/tour/[S·ª¨_D·ª§NG_ID_TH·ª∞C_T·ª™_D·ªÆ_LI·ªÜU]"

üìù M·∫™U TR·∫¢ L·ªúI LI√äN H·ªÜ:
Khi kh√°ch h√†ng h·ªèi c√°ch li√™n h·ªá, ƒë·∫∑t tour, ho·∫∑c c·∫ßn h·ªó tr·ª£, h√£y tr·∫£ l·ªùi:
"B·∫°n c√≥ th·ªÉ li√™n h·ªá v·ªõi ch√∫ng t√¥i qua:
üìû Hotline: 0972 122 555
üåê Website: http://localhost:5173
Ch√∫ng t√¥i h·ªó tr·ª£ 24/7 ƒë·ªÉ t∆∞ v·∫•n v√† ƒë·∫∑t tour cho b·∫°n!"

üîó T·∫†O LINK TOUR C·ª§ TH·ªÇ:
Khi gi·ªõi thi·ªáu tour c·ª• th·ªÉ, h√£y t·∫°o link tr·ª±c ti·∫øp ƒë·∫øn trang chi ti·∫øt tour:
- Format: http://localhost:5173/tour/[ID_TOUR_TH·ª∞C_T·∫æ]
- QUAN TR·ªåNG: S·ª≠ d·ª•ng ID th·ª±c t·ª´ d·ªØ li·ªáu tour (tour._id), KH√îNG d√πng placeholder
- V√≠ d·ª• ƒë√∫ng: "Xem chi ti·∫øt tour t·∫°i: http://localhost:5173/tour/67890abcdef123456"
- V√≠ d·ª• SAI: "http://localhost:5173/tour/[ID_TOUR_MU_CANG_CHAI]"

üìã V√ç D·ª§ C√ÅCH TR·∫¢ L·ªúI TOUR:
"Tour M√π Cang Ch·∫£i m√πa l√∫a ch√≠n 3 ng√†y 2 ƒë√™m t·ª´ H√† N·ªôi 2025
üí∞ Gi√°: 4.000.000ƒë
‚≠ê ƒê√°nh gi√°: 4.5/5
üîó Xem chi ti·∫øt v√† ƒë·∫∑t tour t·∫°i: http://localhost:5173/tour/67890abcdef123456"

C·∫≠p nh·∫≠t: ${new Date(tourData.lastUpdated).toLocaleString('vi-VN')}`;

    return prompt;
};

// Helper function ƒë·ªÉ format gi√°
const formatPrice = (price) => {
    if (!price || price === 0) return 'Li√™n h·ªá';
    return new Intl.NumberFormat('vi-VN').format(price) + 'ƒë';
};

// Fallback system context khi kh√¥ng l·∫•y ƒë∆∞·ª£c d·ªØ li·ªáu
const getBasicSystemContext = () => {
    return `B·∫°n l√† NDTravel Assistant - m·ªôt tr·ª£ l√Ω AI th√¥ng minh chuy√™n v·ªÅ du l·ªãch v√† t∆∞ v·∫•n tour cho c√¥ng ty NDTravel.

üìû TH√îNG TIN LI√äN H·ªÜ:
- Hotline: 0972 122 555
- Website: http://localhost:5173
- H·ªó tr·ª£ 24/7 cho kh√°ch h√†ng

B·∫°n c√≥ th·ªÉ:
- T∆∞ v·∫•n v·ªÅ c√°c ƒëi·ªÉm ƒë·∫øn du l·ªãch
- G·ª£i √Ω l·ªãch tr√¨nh v√† ho·∫°t ƒë·ªông
- Cung c·∫•p th√¥ng tin v·ªÅ vƒÉn h√≥a, ·∫©m th·ª±c ƒë·ªãa ph∆∞∆°ng
- H·ªó tr·ª£ l·∫≠p k·∫ø ho·∫°ch du l·ªãch
- Tr·∫£ l·ªùi c√°c c√¢u h·ªèi v·ªÅ d·ªãch v·ª• tour
- Cung c·∫•p th√¥ng tin li√™n h·ªá khi kh√°ch h√†ng c·∫ßn h·ªó tr·ª£

H√£y tr·∫£ l·ªùi m·ªôt c√°ch th√¢n thi·ªán, h·ªØu √≠ch v√† ch√≠nh x√°c. S·ª≠ d·ª•ng ti·∫øng Vi·ªát ƒë·ªÉ giao ti·∫øp.
Khi kh√°ch h√†ng h·ªèi v·ªÅ tour c·ª• th·ªÉ, h√£y khuy·∫øn kh√≠ch h·ªç truy c·∫≠p website ƒë·ªÉ xem th√¥ng tin chi ti·∫øt v√† ƒë·∫∑t tour.

Khi kh√°ch h√†ng h·ªèi v·ªÅ li√™n h·ªá, LU√îN tr·∫£ l·ªùi:
"B·∫°n c√≥ th·ªÉ li√™n h·ªá v·ªõi ch√∫ng t√¥i qua:
üìû Hotline: 0972 122 555
üåê Website: http://localhost:5173
Ch√∫ng t√¥i h·ªó tr·ª£ 24/7 ƒë·ªÉ t∆∞ v·∫•n v√† ƒë·∫∑t tour cho b·∫°n!"

Khi gi·ªõi thi·ªáu tour c·ª• th·ªÉ, h√£y cung c·∫•p link chi ti·∫øt tour n·∫øu c√≥ ID.`;
};

/**
 * T·∫°o session ID m·ªõi cho h·ªôi tho·∫°i
 */
function generateSessionId() {
    return 'session_' + Date.now() + '_' + Math.random().toString(36).substr(2, 9);
}

/**
 * L·∫•y l·ªãch s·ª≠ h·ªôi tho·∫°i theo session ID
 */
function getConversationHistory(sessionId) {
    if (!conversationHistory.has(sessionId)) {
        conversationHistory.set(sessionId, []);
    }
    return conversationHistory.get(sessionId);
}

/**
 * L∆∞u tin nh·∫Øn v√†o l·ªãch s·ª≠ h·ªôi tho·∫°i - t·ªëi ∆∞u ƒë·ªÉ tr√°nh token limit
 */
function saveMessageToHistory(sessionId, role, content) {
    const history = getConversationHistory(sessionId);

    // C·∫Øt ng·∫Øn content n·∫øu qu√° d√†i ƒë·ªÉ ti·∫øt ki·ªám memory v√† token
    const maxContentLength = 500;
    const trimmedContent = content.length > maxContentLength
        ? content.substring(0, maxContentLength) + '...'
        : content;

    history.push({
        role,
        content: trimmedContent,
        timestamp: new Date().toISOString()
    });

    // Gi·∫£m gi·ªõi h·∫°n l·ªãch s·ª≠ xu·ªëng 30 tin nh·∫Øn ƒë·ªÉ t·ªëi ∆∞u token usage
    if (history.length > 30) {
        history.splice(0, history.length - 30);
    }
}

/**
 * X√¢y d·ª±ng context cho cu·ªôc h·ªôi tho·∫°i v·ªõi d·ªØ li·ªáu tour ƒë·ªông - t·ªëi ∆∞u token
 */
async function buildConversationContext(sessionId, newMessage) {
    const history = getConversationHistory(sessionId);
    const systemContext = await getSystemContext();

    // T·ªëi ∆∞u: gi·∫£m ƒë·ªô d√†i context
    let context = systemContext + "\n\n=== H·ªòI THO·∫†I ===\n";

    // Ch·ªâ l·∫•y 6 tin nh·∫Øn g·∫ßn nh·∫•t ƒë·ªÉ ti·∫øt ki·ªám token
    const recentHistory = history.slice(-6);
    recentHistory.forEach(msg => {
        const role = msg.role === 'user' ? 'üë§' : 'ü§ñ';
        // C·∫Øt ng·∫Øn tin nh·∫Øn d√†i ƒë·ªÉ ti·∫øt ki·ªám token
        const content = msg.content.length > 200 ? msg.content.substring(0, 200) + '...' : msg.content;
        context += `${role}: ${content}\n`;
    });

    context += `\nüë§: ${newMessage}\n\n`;

    // H∆∞·ªõng d·∫´n ng·∫Øn g·ªçn
    context += `üîç H∆Ø·ªöNG D·∫™N:
- S·ª≠ d·ª•ng d·ªØ li·ªáu tour th·ª±c t·ª´ h·ªá th·ªëng
- Tr·∫£ l·ªùi ng·∫Øn g·ªçn, ch√≠nh x√°c
- ƒê·ªÅ xu·∫•t tour ph√π h·ª£p
- K·∫øt th√∫c b·∫±ng c√¢u h·ªèi h·ªó tr·ª£

ü§ñ:`;

    return context;
}

/**
 * G·ª≠i tin nh·∫Øn ƒë·∫øn Gemini AI
 */
async function askGemini(message, sessionId = null) {
    try {
        // Validate input
        if (!message || typeof message !== 'string' || message.trim().length === 0) {
            throw new Error('Tin nh·∫Øn kh√¥ng h·ª£p l·ªá');
        }

        // Ki·ªÉm tra API key
        if (!process.env.GEMINI_API_KEY) {
            throw new Error('GEMINI_API_KEY kh√¥ng ƒë∆∞·ª£c c·∫•u h√¨nh');
        }

        // T·∫°o session ID n·∫øu ch∆∞a c√≥
        if (!sessionId) {
            sessionId = generateSessionId();
        }

        // X√¢y d·ª±ng context v·ªõi l·ªãch s·ª≠ h·ªôi tho·∫°i v√† d·ªØ li·ªáu tour
        const contextualMessage = await buildConversationContext(sessionId, message.trim());

        // Kh·ªüi t·∫°o model
        const model = genAI.getGenerativeModel(MODEL_CONFIG);

        // G·ª≠i request ƒë·∫øn Gemini
        const result = await model.generateContent(contextualMessage);
        const response = await result.response;
        const aiReply = response.text();

        // L∆∞u tin nh·∫Øn v√†o l·ªãch s·ª≠
        saveMessageToHistory(sessionId, 'user', message.trim());
        saveMessageToHistory(sessionId, 'assistant', aiReply);

        return {
            success: true,
            reply: aiReply,
            sessionId: sessionId,
            timestamp: new Date().toISOString()
        };

    } catch (error) {
        console.error('Gemini API error:', error);

        // X·ª≠ l√Ω c√°c lo·∫°i l·ªói kh√°c nhau
        let errorMessage = 'Xin l·ªói, t√¥i kh√¥ng th·ªÉ tr·∫£ l·ªùi l√∫c n√†y. Vui l√≤ng th·ª≠ l·∫°i sau.';

        if (error.message?.includes('API_KEY')) {
            errorMessage = 'L·ªói c·∫•u h√¨nh h·ªá th·ªëng. Vui l√≤ng li√™n h·ªá qu·∫£n tr·ªã vi√™n.';
        } else if (error.message?.includes('QUOTA_EXCEEDED')) {
            errorMessage = 'H·ªá th·ªëng ƒëang qu√° t·∫£i. Vui l√≤ng th·ª≠ l·∫°i sau √≠t ph√∫t.';
        } else if (error.message?.includes('RATE_LIMIT')) {
            errorMessage = 'B·∫°n ƒëang g·ª≠i tin nh·∫Øn qu√° nhanh. Vui l√≤ng ch·ªù m·ªôt ch√∫t.';
        } else if (error.message?.includes('SAFETY')) {
            errorMessage = 'Tin nh·∫Øn c·ªßa b·∫°n vi ph·∫°m ch√≠nh s√°ch an to√†n. Vui l√≤ng th·ª≠ l·∫°i v·ªõi n·ªôi dung kh√°c.';
        }

        return {
            success: false,
            error: errorMessage,
            timestamp: new Date().toISOString()
        };
    }
}

/**
 * L·∫•y l·ªãch s·ª≠ h·ªôi tho·∫°i
 */
async function getChatHistory(sessionId) {
    try {
        if (!sessionId) {
            return {
                success: false,
                error: 'Session ID kh√¥ng h·ª£p l·ªá'
            };
        }

        const history = getConversationHistory(sessionId);
        return {
            success: true,
            history: history,
            sessionId: sessionId
        };
    } catch (error) {
        console.error('Error getting chat history:', error);
        return {
            success: false,
            error: 'Kh√¥ng th·ªÉ l·∫•y l·ªãch s·ª≠ h·ªôi tho·∫°i'
        };
    }
}

/**
 * X√≥a l·ªãch s·ª≠ h·ªôi tho·∫°i
 */
async function clearChatHistory(sessionId) {
    try {
        if (!sessionId) {
            return {
                success: false,
                error: 'Session ID kh√¥ng h·ª£p l·ªá'
            };
        }

        conversationHistory.delete(sessionId);
        return {
            success: true,
            message: 'ƒê√£ x√≥a l·ªãch s·ª≠ h·ªôi tho·∫°i'
        };
    } catch (error) {
        console.error('Error clearing chat history:', error);
        return {
            success: false,
            error: 'Kh√¥ng th·ªÉ x√≥a l·ªãch s·ª≠ h·ªôi tho·∫°i'
        };
    }
}

/**
 * T·∫°o session m·ªõi
 */
async function createNewSession() {
    try {
        const sessionId = generateSessionId();
        return {
            success: true,
            sessionId: sessionId,
            message: 'ƒê√£ t·∫°o phi√™n h·ªôi tho·∫°i m·ªõi'
        };
    } catch (error) {
        console.error('Error creating new session:', error);
        return {
            success: false,
            error: 'Kh√¥ng th·ªÉ t·∫°o phi√™n h·ªôi tho·∫°i m·ªõi'
        };
    }
}

module.exports = {
    askGemini,
    getChatHistory,
    clearChatHistory,
    createNewSession,
    generateSessionId,
    invalidateCache,
    getCacheStatus
};