import React, { useState, useEffect } from 'react';
import { useParams, useNavigate, useSearchParams } from 'react-router-dom';
import { checkMoMoPaymentStatus, checkVNPayPaymentStatus, handleVNPayReturn } from '../../services/OrderService';
import { toast } from 'react-toastify';
import './PaymentStatus.scss';

// Helper function ƒë·ªÉ chuy·ªÉn ƒë·ªïi m√£ l·ªói VNPay th√†nh th√¥ng ƒëi·ªáp d·ªÖ hi·ªÉu
const getVNPayErrorMessage = (responseCode) => {
  const errorMessages = {
    '01': 'Giao d·ªãch ch∆∞a ho√†n t·∫•t',
    '02': 'Giao d·ªãch b·ªã l·ªói',
    '04': 'Giao d·ªãch ƒë·∫£o (Kh√°ch h√†ng ƒë√£ b·ªã tr·ª´ ti·ªÅn t·∫°i Ng√¢n h√†ng nh∆∞ng GD ch∆∞a th√†nh c√¥ng ·ªü VNPAY)',
    '05': 'VNPAY ƒëang x·ª≠ l√Ω giao d·ªãch n√†y (GD ho√†n ti·ªÅn)',
    '06': 'VNPAY ƒë√£ g·ª≠i y√™u c·∫ßu ho√†n ti·ªÅn sang Ng√¢n h√†ng (GD ho√†n ti·ªÅn)',
    '07': 'Giao d·ªãch b·ªã nghi ng·ªù gian l·∫≠n',
    '09': 'GD Ho√†n tr·∫£ b·ªã t·ª´ ch·ªëi',
    '10': 'ƒê√£ giao h√†ng',
    '11': 'Giao d·ªãch kh√¥ng h·ª£p l·ªá',
    '12': 'Giao d·ªãch kh√¥ng th√†nh c√¥ng',
    '13': 'T√†i kho·∫£n kh√¥ng ƒë·ªß s·ªë d∆∞',
    '51': 'T√†i kho·∫£n c·ªßa qu√Ω kh√°ch kh√¥ng ƒë·ªß s·ªë d∆∞ ƒë·ªÉ th·ª±c hi·ªán giao d·ªãch',
    '65': 'T√†i kho·∫£n c·ªßa Qu√Ω kh√°ch ƒë√£ v∆∞·ª£t qu√° h·∫°n m·ª©c giao d·ªãch trong ng√†y',
    '75': 'Ng√¢n h√†ng thanh to√°n ƒëang b·∫£o tr√¨',
    '79': 'KH nh·∫≠p sai m·∫≠t kh·∫©u thanh to√°n qu√° s·ªë l·∫ßn quy ƒë·ªãnh'
  };
  
  return errorMessages[responseCode] || `L·ªói kh√¥ng x√°c ƒë·ªãnh (M√£: ${responseCode})`;
};

// Helper function ƒë·ªÉ chuy·ªÉn ƒë·ªïi m√£ l·ªói MoMo th√†nh th√¥ng ƒëi·ªáp d·ªÖ hi·ªÉu
const getMoMoErrorMessage = (resultCode) => {
  const errorMessages = {
    '1000': 'Giao d·ªãch ƒë∆∞·ª£c kh·ªüi t·∫°o th√†nh c√¥ng',
    '1001': 'Giao d·ªãch thanh to√°n th·∫•t b·∫°i do t√†i kho·∫£n ng∆∞·ªùi d√πng ch∆∞a ƒë∆∞·ª£c k√≠ch ho·∫°t',
    '1002': 'Giao d·ªãch b·ªã t·ª´ ch·ªëi b·ªüi nh√† cung c·∫•p d·ªãch v·ª• thanh to√°n',
    '1003': 'Giao d·ªãch b·ªã h·ªßy b·ªüi ng∆∞·ªùi d√πng',
    '1004': 'Giao d·ªãch kh√¥ng th√†nh c√¥ng do s·ªë d∆∞ t√†i kho·∫£n kh√¥ng ƒë·ªß',
    '1005': 'Giao d·ªãch kh√¥ng th√†nh c√¥ng do url ho·∫∑c QR code ƒë√£ h·∫øt h·∫°n',
    '1006': 'Giao d·ªãch kh√¥ng th√†nh c√¥ng do ng∆∞·ªùi d√πng ƒë√£ t·ª´ ch·ªëi x√°c nh·∫≠n thanh to√°n',
    '1007': 'Giao d·ªãch b·ªã t·ª´ ch·ªëi do t√†i kho·∫£n ng∆∞·ªùi g·ª≠i kh√¥ng ƒë·ªß th√¥ng tin KYC',
    '2001': 'Giao d·ªãch th·∫•t b·∫°i do sai th√¥ng tin',
    '2007': 'Giao d·ªãch b·ªã t·ª´ ch·ªëi do t√†i kho·∫£n ƒë√£ b·ªã t·∫°m kh√≥a',
    '49': 'C·ª≠a h√†ng kh√¥ng ƒë∆∞·ª£c ph√©p th·ª±c hi·ªán giao d·ªãch',
    '10': 'H·ªá th·ªëng ƒëang b·∫£o tr√¨'
  };
  
  return errorMessages[resultCode] || `L·ªói kh√¥ng x√°c ƒë·ªãnh (M√£: ${resultCode})`;
};

// Component hi·ªÉn th·ªã tr·∫°ng th√°i thanh to√°n th√†nh c√¥ng
const PaymentSuccessBlock = ({ paymentData, countdown, onNavigateToOrders, onNavigateToHome }) => {
  return (
    <div className="payment-success-block">
      {/* Success Icon */}
      <div className="payment-illustration">
        <div className="payment-success-icon-container">
          <div className="payment-success-icon">‚úì</div>
          <div className="payment-success-ring"></div>
        </div>
        {/* Decorative elements */}
        <div className="payment-decoration payment-decoration-1"></div>
        <div className="payment-decoration payment-decoration-2"></div>
        <div className="payment-decoration payment-decoration-3"></div>
      </div>

      {/* Success Message */}
      <div className="payment-success-content">
        <h1 className="payment-success-title">Thanh to√°n th√†nh c√¥ng!</h1>
        <p className="payment-success-message">
          üéâ Ch√∫c m·ª´ng! Thanh to√°n c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c x·ª≠ l√Ω th√†nh c√¥ng qua {paymentData?.paymentMethod || 'h·ªá th·ªëng thanh to√°n'}. 
          ƒê∆°n h√†ng ƒë√£ ƒë∆∞·ª£c ghi nh·∫≠n v√† x√°c nh·∫≠n gi·ªØ ch·ªó.
        </p>

        {/* Payment Information */}
        {paymentData && (
          <div className="payment-info">
            <div className="payment-details">
              <div className="payment-detail-item">
                <span className="detail-label">M√£ ƒë∆°n h√†ng:</span>
                <span className="detail-value">{paymentData.orderId}</span>
              </div>
              <div className="payment-detail-item">
                <span className="detail-label">Kh√°ch h√†ng:</span>
                <span className="detail-value">{paymentData.customer}</span>
              </div>
              <div className="payment-detail-item">
                <span className="detail-label">Email:</span>
                <span className="detail-value">{paymentData.email}</span>
              </div>
              <div className="payment-detail-item">
                <span className="detail-label">S·ªë ƒëi·ªán tho·∫°i:</span>
                <span className="detail-value">{paymentData.phone}</span>
              </div>
                <div className="payment-detail-item">
                    <span className="detail-label">Tr·∫°ng th√°i:</span>
                    <span className="detail-value status-completed">
                    {paymentData.paymentStatus === 'completed' ? 'ƒê√£ thanh to√°n' : 
                        paymentData.paymentStatus === 'failed' ? 'Thanh to√°n th·∫•t b·∫°i' :
                        paymentData.paymentStatus === 'refund' ? 'Ho√†n ti·ªÅn' :
                        paymentData.status === 'confirmed' ? 'ƒê√£ x√°c nh·∫≠n' : 'ƒêang x·ª≠ l√Ω'}
                    </span>
                </div>
                <div className="payment-detail-item">
                    <span className="detail-label">Ph∆∞∆°ng th·ª©c thanh to√°n:</span>
                    <span className="detail-value">{paymentData.paymentMethod}</span>
                </div>
              <div className="payment-detail-item">
                <span className="detail-label">T·ªïng ti·ªÅn:</span>
                <span className="detail-value total-amount">
                  {new Intl.NumberFormat('vi-VN', {
                    style: 'currency',
                    currency: 'VND'
                  }).format(paymentData.totalAmount)}
                </span>
              </div>
              <div className="payment-detail-item">
                <span className="detail-label">Th·ªùi gian ƒë·∫∑t:</span>
                <span className="detail-value">
                  {new Date(paymentData.createdAt).toLocaleString('vi-VN')}
                </span>
              </div>
            </div>
          </div>
        )}

        {/* Hotline */}
        <div className="payment-hotline-info">
          <span className="payment-hotline-text">Hotline h·ªó tr·ª£: </span>
          <span className="payment-hotline-number">0972 122 555</span>
        </div>

        {/* Auto redirect countdown */}
        <div className="payment-countdown">
          <p>T·ª± ƒë·ªông chuy·ªÉn ƒë·∫øn trang ƒë∆°n h√†ng trong {countdown} gi√¢y</p>
        </div>

        {/* Action Buttons */}
        <div className="payment-action-buttons">
          <button className="payment-btn-primary" onClick={onNavigateToOrders}>
            Xem ƒë∆°n h√†ng
          </button>
          <button className="payment-btn-secondary" onClick={onNavigateToHome}>
            V·ªÅ trang ch·ªß
          </button>
        </div>
      </div>
    </div>
  );
};

// Component hi·ªÉn th·ªã tr·∫°ng th√°i l·ªói thanh to√°n
const PaymentErrorBlock = ({ errorMessage, momoMessage, onChooseAnotherMethod, onNavigateToHome }) => {
  return (
    <div className="payment-error-block">
      <div className="payment-error-illustration">
        <div className="payment-error-icon-container">
          <div className="payment-error-icon">‚úó</div>
        </div>
      </div>
      
      <div className="payment-error-content">
        <h1 className="payment-error-title">Thanh to√°n th·∫•t b·∫°i</h1>
        <p className="payment-error-message">
          {errorMessage || 'ƒê√£ c√≥ l·ªói x·∫£y ra trong qu√° tr√¨nh thanh to√°n.'}
        </p>
        {momoMessage && (
          <p className="payment-error-detail">L√Ω do: {momoMessage}</p>
        )}
        
        <div className="payment-hotline-info">
          <span className="payment-hotline-text">Hotline h·ªó tr·ª£: </span>
          <span className="payment-hotline-number">0972 122 555</span>
        </div>
        
        <div className="payment-action-buttons">
          <button className="payment-btn-primary" onClick={onChooseAnotherMethod}>
            Ch·ªçn ph∆∞∆°ng th·ª©c kh√°c
          </button>
          <button className="payment-btn-secondary" onClick={onNavigateToHome}>
            V·ªÅ trang ch·ªß
          </button>
        </div>
      </div>
    </div>
  );
};

// Component hi·ªÉn th·ªã khi thanh to√°n tr·ª±c tuy·∫øn th·∫•t b·∫°i v·ªõi th√¥ng tin chi ti·∫øt
const PaymentFailedBlock = ({ paymentData, paymentMethod, failureReason, onChooseAnotherMethod, onNavigateToHome }) => {
  return (
    <div className="payment-failed-block">
      <div className="payment-failed-illustration">
        <div className="payment-failed-icon-container">
          <div className="payment-failed-icon">‚úó</div>
        </div>
      </div>
      
      <div className="payment-failed-content">
        <h1 className="payment-failed-title">Thanh to√°n {paymentMethod} th·∫•t b·∫°i</h1>
        <p className="payment-failed-message">
          Giao d·ªãch thanh to√°n qua {paymentMethod} c·ªßa b·∫°n kh√¥ng th√†nh c√¥ng.
        </p>
        
        {/* Payment Information */}
        {paymentData && (
          <div className="payment-info">
            <div className="payment-details">
              <div className="payment-detail-item">
                <span className="detail-label">M√£ ƒë∆°n h√†ng:</span>
                <span className="detail-value">{paymentData.orderId}</span>
              </div>
              <div className="payment-detail-item">
                <span className="detail-label">Ph∆∞∆°ng th·ª©c thanh to√°n:</span>
                <span className="detail-value">{paymentMethod}</span>
              </div>
              <div className="payment-detail-item">
                <span className="detail-label">Tr·∫°ng th√°i:</span>
                <span className="detail-value status-failed">Thanh to√°n th·∫•t b·∫°i</span>
              </div>
            </div>
          </div>
        )}
        
        <div className="payment-failed-suggestions">
          <h4>Nh·ªØng vi·ªác b·∫°n c√≥ th·ªÉ l√†m:</h4>
          <ul>
            <li>Ki·ªÉm tra l·∫°i th√¥ng tin t√†i kho·∫£n/th·∫ª</li>
            <li>ƒê·∫£m b·∫£o t√†i kho·∫£n c√≥ ƒë·ªß s·ªë d∆∞</li>
            <li>Th·ª≠ l·∫°i v·ªõi ph∆∞∆°ng th·ª©c thanh to√°n kh√°c</li>
            <li>Li√™n h·ªá hotline ƒë·ªÉ ƒë∆∞·ª£c h·ªó tr·ª£</li>
          </ul>
        </div>
        
        <div className="payment-hotline-info">
          <span className="payment-hotline-text">Hotline h·ªó tr·ª£: </span>
          <span className="payment-hotline-number">0972 122 555</span>
        </div>
        
        <div className="payment-action-buttons">
          <button className="payment-btn-primary" onClick={onChooseAnotherMethod}>
            Th·ª≠ ph∆∞∆°ng th·ª©c kh√°c
          </button>
          <button className="payment-btn-secondary" onClick={onNavigateToHome}>
            V·ªÅ trang ch·ªß
          </button>
        </div>
      </div>
    </div>
  );
};

// Component hi·ªÉn th·ªã tr·∫°ng th√°i ƒëang x·ª≠ l√Ω
const PaymentPendingBlock = ({ onChooseAnotherMethod, onNavigateToHome }) => {
  return (
    <div className="payment-pending-block">
      <div className="payment-pending-illustration">
        <div className="payment-pending-icon-container">
          <div className="payment-pending-icon">‚è≥</div>
        </div>
      </div>
      
      <div className="payment-pending-content">
        <h1 className="payment-pending-title">Thanh to√°n ƒëang x·ª≠ l√Ω</h1>
        <p className="payment-pending-message">
          Giao d·ªãch c·ªßa b·∫°n ƒëang ƒë∆∞·ª£c x·ª≠ l√Ω. Vui l√≤ng ƒë·ª£i trong gi√¢y l√°t ho·∫∑c ch·ªçn ph∆∞∆°ng th·ª©c thanh to√°n kh√°c.
        </p>
        
        <div className="payment-hotline-info">
          <span className="payment-hotline-text">Hotline h·ªó tr·ª£: </span>
          <span className="payment-hotline-number">0972 122 555</span>
        </div>
        
        <div className="payment-action-buttons">
          <button className="payment-btn-primary" onClick={onChooseAnotherMethod}>
            Ch·ªçn ph∆∞∆°ng th·ª©c kh√°c
          </button>
          <button className="payment-btn-secondary" onClick={onNavigateToHome}>
            V·ªÅ trang ch·ªß
          </button>
        </div>
      </div>
    </div>
  );
};

// Component hi·ªÉn th·ªã khi ƒëang ki·ªÉm tra
const PaymentCheckingBlock = () => {
  return (
    <div className="payment-checking-block">
      <div className="payment-checking-illustration">
        <div className="payment-spinner"></div>
      </div>
      <div className="payment-checking-content">
        <h2 className="payment-checking-title">ƒêang ki·ªÉm tra tr·∫°ng th√°i thanh to√°n...</h2>
        <p className="payment-checking-message">Vui l√≤ng ƒë·ª£i trong gi√¢y l√°t</p>
      </div>
    </div>
  );
};

const PaymentStatus = () => {
  const { orderId: paramOrderId } = useParams();
  const [searchParams] = useSearchParams();
  const navigate = useNavigate();
  const [paymentStatus, setPaymentStatus] = useState('checking');
  const [paymentData, setPaymentData] = useState(null);
  const [countdown, setCountdown] = useState(10);
  const [paymentMethod, setPaymentMethod] = useState('');
  const [failureReason, setFailureReason] = useState('');

  // L·∫•y orderId t·ª´ params ho·∫∑c search params (MoMo callback)
  const orderId = paramOrderId || searchParams.get('orderId');
  const momoResultCode = searchParams.get('resultCode');
  const momoMessage = searchParams.get('message');
  
  // VNPay parameters
  const vnpayResponseCode = searchParams.get('vnp_ResponseCode');
  const vnpayTxnRef = searchParams.get('vnp_TxnRef');
  const vnpayTransactionNo = searchParams.get('vnp_TransactionNo');
  const vnpayMessage = searchParams.get('vnp_OrderInfo');
  
  // X√°c ƒë·ªãnh lo·∫°i thanh to√°n t·ª´ URL ho·∫∑c params
  const paymentType = vnpayResponseCode ? 'vnpay' : (momoResultCode ? 'momo' : 'unknown');

  // Validate orderId s·ªõm ƒë·ªÉ tr√°nh render kh√¥ng c·∫ßn thi·∫øt
  const isValidOrderId = orderId && typeof orderId === 'string' && orderId.trim().length > 0;

  useEffect(() => {
    // Validate orderId - ph·∫£i l√† m·ªôt chu·ªói h·ª£p l·ªá
    if (isValidOrderId) {
      checkPaymentStatus();
      
      // L√†m s·∫°ch URL ngay l·∫≠p t·ª©c ƒë·ªÉ tr√°nh b·ªã thu th·∫≠p th√¥ng tin nh·∫°y c·∫£m
      // Ch·ªâ gi·ªØ l·∫°i orderId trong URL, lo·∫°i b·ªè t·∫•t c·∫£ params
      if (searchParams.size > 0) {
        const cleanUrl = `/payment/success/${orderId}`;
        // S·ª≠ d·ª•ng setTimeout ƒë·ªÉ ƒë·∫£m b·∫£o x·ª≠ l√Ω params xong r·ªìi m·ªõi clean URL
        setTimeout(() => {
          window.history.replaceState({}, document.title, cleanUrl);
        }, 100);
      }
    } else {
      // N·∫øu kh√¥ng c√≥ orderId h·ª£p l·ªá, chuy·ªÉn v·ªÅ trang ch·ªß v√† thay th·∫ø history
      toast.error('Kh√¥ng t√¨m th·∫•y th√¥ng tin ƒë∆°n h√†ng');
      navigate('/', { replace: true });
    }
  }, [isValidOrderId, orderId, searchParams.size, navigate]);

  // SEO: NgƒÉn search engine index trang thanh to√°n v√† b·∫£o m·∫≠t th√¥ng tin
  useEffect(() => {
    // C·∫≠p nh·∫≠t title trang cho SEO
    const originalTitle = document.title;
    document.title = 'K·∫øt qu·∫£ thanh to√°n - Du l·ªãch F8';

    // Th√™m meta robots noindex, nofollow
    const metaRobots = document.createElement('meta');
    metaRobots.name = 'robots';
    metaRobots.content = 'noindex, nofollow, noarchive, nosnippet, noimageindex';
    document.head.appendChild(metaRobots);

    // Th√™m meta viewport sensitive content
    const metaSensitive = document.createElement('meta');
    metaSensitive.name = 'sensitive';
    metaSensitive.content = 'true';
    document.head.appendChild(metaSensitive);

    // Th√™m meta ƒë·ªÉ ngƒÉn cache
    const metaCache = document.createElement('meta');
    metaCache.httpEquiv = 'Cache-Control';
    metaCache.content = 'no-cache, no-store, must-revalidate';
    document.head.appendChild(metaCache);

    // Th√™m meta description cho SEO
    const metaDescription = document.createElement('meta');
    metaDescription.name = 'description';
    metaDescription.content = 'Trang k·∫øt qu·∫£ thanh to√°n tour du l·ªãch. Th√¥ng tin n√†y ch·ªâ d√†nh cho kh√°ch h√†ng ƒë√£ th·ª±c hi·ªán giao d·ªãch.';
    document.head.appendChild(metaDescription);

    // Cleanup khi component unmount
    return () => {
      document.title = originalTitle;
      try {
        document.head.removeChild(metaRobots);
        document.head.removeChild(metaSensitive);
        document.head.removeChild(metaCache);
        document.head.removeChild(metaDescription);
      } catch (error) {
        // Ignore errors n·∫øu element ƒë√£ b·ªã x√≥a
      }
    };
  }, []);

  // useEffect(() => {
  //   if (paymentStatus === 'completed' && countdown > 0) {
  //     const timer = setInterval(() => {
  //       setCountdown(prev => prev - 1);
  //     }, 1000);

  //     return () => clearInterval(timer);
  //   } else if (countdown === 0) {
  //     // Chuy·ªÉn ƒë·∫øn trang ƒë∆°n h√†ng v·ªõi replace ƒë·ªÉ tr√°nh back v·ªÅ PaymentStatus
  //     navigate('/tra-cuu-don-hang', { replace: true });
  //   }
  // }, [paymentStatus, countdown, navigate]);

  const checkPaymentStatus = async () => {
    try {
      setPaymentStatus('checking');
      
      // X·ª≠ l√Ω VNPay return callback
      if (vnpayResponseCode) {
        const vnpayOrderId = vnpayTxnRef ? vnpayTxnRef.split('_')[0] : orderId;
        
        // G·ªçi API backend ƒë·ªÉ x·ª≠ l√Ω VNPay return v√† c·∫≠p nh·∫≠t tr·∫°ng th√°i
        try {
          const vnpayParams = {};
          searchParams.forEach((value, key) => {
            if (key.startsWith('vnp_')) {
              vnpayParams[key] = value;
            }
          });
          
          const vnpayResponse = await handleVNPayReturn(vnpayParams);
          
          if (vnpayResponse.success) {
            if (vnpayResponseCode === '00') {
              setPaymentStatus('completed');
              setPaymentMethod('VNPay');
              toast.success('Thanh to√°n VNPay th√†nh c√¥ng!');
            } else {
              setPaymentStatus('failed');
              setPaymentMethod('VNPay');
              setFailureReason(getVNPayErrorMessage(vnpayResponseCode));
              toast.error(`Thanh to√°n VNPay th·∫•t b·∫°i. M√£ l·ªói: ${vnpayResponseCode}`);
            }
          } else {
            setPaymentStatus('failed');
            setPaymentMethod('VNPay');
            setFailureReason('C√≥ l·ªói x·∫£y ra khi x·ª≠ l√Ω thanh to√°n VNPay');
            toast.error('C√≥ l·ªói x·∫£y ra khi x·ª≠ l√Ω thanh to√°n VNPay');
          }
        } catch (error) {
          // V·∫´n hi·ªÉn th·ªã k·∫øt qu·∫£ d·ª±a tr√™n response code
          if (vnpayResponseCode === '00') {
            setPaymentStatus('completed');
            setPaymentMethod('VNPay');
            toast.success('Thanh to√°n VNPay th√†nh c√¥ng!');
          } else {
            setPaymentStatus('failed');
            setPaymentMethod('VNPay');
            setFailureReason(getVNPayErrorMessage(vnpayResponseCode));
            toast.error(`Thanh to√°n VNPay th·∫•t b·∫°i. M√£ l·ªói: ${vnpayResponseCode}`);
          }
        }
        
        // Ki·ªÉm tra tr·∫°ng th√°i VNPay t·ª´ backend ƒë·ªÉ l·∫•y th√¥ng tin chi ti·∫øt
        try {
          const response = await checkVNPayPaymentStatus(vnpayOrderId);
          if (response.success) {
            setPaymentData(response.data);
          }
        } catch (error) {
          console.error('L·ªói khi l·∫•y th√¥ng tin ƒë∆°n h√†ng VNPay:', error);
        }
        return;
      }
      
      // Ki·ªÉm tra callback t·ª´ MoMo tr∆∞·ªõc
      if (momoResultCode) {
        if (momoResultCode === '0') {
          setPaymentStatus('completed');
          setPaymentMethod('MoMo');
          toast.success('Thanh to√°n MoMo th√†nh c√¥ng!');
        } else {
          setPaymentStatus('failed');
          setPaymentMethod('MoMo');
          setFailureReason(getMoMoErrorMessage(momoResultCode) || momoMessage);
          toast.error(`Thanh to√°n MoMo th·∫•t b·∫°i: ${momoMessage}`);
          return;
        }
      }

      // Ki·ªÉm tra tr·∫°ng th√°i t·ª´ backend 
      // ∆Øu ti√™n VNPay n·∫øu c√≥ vnpayTxnRef, ng∆∞·ª£c l·∫°i d√πng MoMo
      let response;
      if (paymentType === 'vnpay' || (paymentData && paymentData.vnpayTxnRef)) {
        response = await checkVNPayPaymentStatus(orderId);
      } else {
        response = await checkMoMoPaymentStatus(orderId);
      }
      
      if (response.success) {
        setPaymentData(response.data);
        
        // Thi·∫øt l·∫≠p ph∆∞∆°ng th·ª©c thanh to√°n n·∫øu ch∆∞a c√≥
        if (!paymentMethod) {
          setPaymentMethod(response.data.paymentMethod);
        }
        
        if (response.data.paymentStatus === 'completed' || 
            response.data.momoStatus === 'completed') {
          setPaymentStatus('completed');
          if (!momoResultCode && !vnpayResponseCode) {
            toast.success(`Thanh to√°n ${response.data.paymentMethod} th√†nh c√¥ng!`);
          }
        } else if (response.data.paymentStatus === 'failed') {
          setPaymentStatus('failed');
          if (!paymentMethod) {
            setPaymentMethod(response.data.paymentMethod);
          }
          if (!momoResultCode && !vnpayResponseCode) {
            toast.error(`Thanh to√°n ${response.data.paymentMethod} th·∫•t b·∫°i!`);
          }
        } else if (response.data.paymentStatus === 'refund') {
          setPaymentStatus('refunded');
          if (!momoResultCode && !vnpayResponseCode) {
            toast.info('ƒê∆°n h√†ng ƒë√£ ƒë∆∞·ª£c ho√†n ti·ªÅn!');
          }
        } else {
          setPaymentStatus('pending');
          // C√≥ th·ªÉ th√™m logic ki·ªÉm tra l·∫°i sau 5 gi√¢y
          setTimeout(() => {
            checkPaymentStatus();
          }, 5000);
        }
      } else {
        setPaymentStatus('error');
        toast.error(response.message || 'Kh√¥ng th·ªÉ ki·ªÉm tra tr·∫°ng th√°i thanh to√°n');
      }
    } catch (error) {
      setPaymentStatus('error');
      toast.error('L·ªói khi ki·ªÉm tra tr·∫°ng th√°i thanh to√°n');
    }
  };

  const handleNavigateToOrders = () => {
    navigate('/tra-cuu-don-hang', { replace: true });
  };

  const handleNavigateToHome = () => {
    navigate('/', { replace: true });
  };

  const handleChooseAnotherMethod = () => {
    // L·∫•y tourId t·ª´ paymentData ho·∫∑c t·ª´ orderId
    let tourId = null;
    
    if (paymentData && paymentData.tourId) {
      tourId = paymentData.tourId;
    } else if (paymentData && paymentData.items && paymentData.items.length > 0) {
      // L·∫•y tourId t·ª´ items n·∫øu c√≥
      tourId = paymentData.items[0].tourId;
    }

    if (tourId) {
      // Chuy·ªÉn ƒë·∫øn trang chi ti·∫øt tour ƒë·ªÉ ƒë·∫∑t l·∫°i
      navigate(`/tour/${tourId}`, { replace: true });
      toast.info('ƒêang chuy·ªÉn ƒë·∫øn trang tour ƒë·ªÉ ch·ªçn ph∆∞∆°ng th·ª©c thanh to√°n kh√°c');
    } else {
      // N·∫øu kh√¥ng c√≥ tourId, chuy·ªÉn v·ªÅ trang danh s√°ch tour
      navigate('/tours', { replace: true });
      toast.info('ƒêang chuy·ªÉn ƒë·∫øn trang danh s√°ch tour');
    }
  };

  const renderStatus = () => {
    switch (paymentStatus) {
      case 'checking':
        return <PaymentCheckingBlock />;

      case 'completed':
        return (
          <PaymentSuccessBlock
            paymentData={paymentData}
            countdown={countdown}
            onNavigateToOrders={handleNavigateToOrders}
            onNavigateToHome={handleNavigateToHome}
          />
        );

      case 'failed':
        // Ki·ªÉm tra xem c√≥ ph·∫£i l√† thanh to√°n tr·ª±c tuy·∫øn th·∫•t b·∫°i kh√¥ng
        if (paymentMethod && (paymentMethod === 'MoMo' || paymentMethod === 'VNPay')) {
          return (
            <PaymentFailedBlock
              paymentData={paymentData}
              paymentMethod={paymentMethod}
              failureReason={failureReason}
              onChooseAnotherMethod={handleChooseAnotherMethod}
              onNavigateToHome={handleNavigateToHome}
            />
          );
        } else {
          // Tr∆∞·ªùng h·ª£p l·ªói chung
          return (
            <PaymentErrorBlock
              errorMessage="Thanh to√°n th·∫•t b·∫°i. Vui l√≤ng ch·ªçn ph∆∞∆°ng th·ª©c kh√°c"
              momoMessage={momoMessage}
              onChooseAnotherMethod={handleChooseAnotherMethod}
              onNavigateToHome={handleNavigateToHome}
            />
          );
        }

      case 'refunded':
        return (
          <PaymentErrorBlock
            errorMessage="ƒê∆°n h√†ng ƒë√£ ƒë∆∞·ª£c ho√†n ti·ªÅn. Li√™n h·ªá hotline ƒë·ªÉ bi·∫øt th√™m chi ti·∫øt."
            onChooseAnotherMethod={handleChooseAnotherMethod}
            onNavigateToHome={handleNavigateToHome}
          />
        );

      case 'pending':
        return (
          <PaymentPendingBlock
            onChooseAnotherMethod={handleChooseAnotherMethod}
            onNavigateToHome={handleNavigateToHome}
          />
        );

      case 'error':
      default:
        return (
          <PaymentErrorBlock
            errorMessage="Kh√¥ng th·ªÉ ki·ªÉm tra tr·∫°ng th√°i thanh to√°n. Vui l√≤ng th·ª≠ l·∫°i."
            onChooseAnotherMethod={handleChooseAnotherMethod}
            onNavigateToHome={handleNavigateToHome}
          />
        );
    }
  };

  if (!isValidOrderId) {
    return (
      <div className="payment-status-page loading">
        <div className="payment-status-container">
          <PaymentCheckingBlock />
        </div>
      </div>
    );
  }

  return (
    <div className="payment-status-page">
      <div className="payment-status-container">
        {renderStatus()}
      </div>
    </div>
  );
};

export default PaymentStatus;
